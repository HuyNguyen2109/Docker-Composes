version: '3.8'

services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    deploy:
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
      replicas: 1
      resources:
        limits:
          cpus: "0.5"        # Limit the service to 50% of a single CPU core
          memory: "2G"     # Limit the service to 512MB of memory
        reservations:
          cpus: "0.25"       # Reserve 25% of a single CPU core for the service
          memory: "1G"
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role==worker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /mnt/big-data/docker/authentik/database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    networks:
      - db-swarm-network
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    networks:
      - db-swarm-network
    deploy:
      placement:
        constraints:
          - node.role==worker
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - /mnt/big-data/docker/authentik/redis:/data
  authentik-server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.1}
    deploy:
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: rollback
      replicas: 1
      resources:
        limits:
          cpus: "0.5"        # Limit the service to 50% of a single CPU core
          memory: "2G"     # Limit the service to 512MB of memory
        reservations:
          cpus: "0.25"       # Reserve 25% of a single CPU core for the service
          memory: "1G"
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role==worker
      labels:
        - "traefik.enable=true"
        - "traefik.swarm.network=traefik-swarm-network"
        - "traefik.http.services.authentik-server.loadbalancer.server.port=9000"
        - "traefik.http.routers.authentik-server.entrypoints=websecure"
        - "traefik.http.routers.authentik-server.service=authentik-server"
        - "traefik.http.routers.authentik-server.rule=Host(`auth.${ROOT_DOMAIN}`)"
        - "traefik.http.routers.authentik-server.tls.certresolver=letsencrypt"
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - /mnt/big-data/docker/authentik/server/media:/media
      - /mnt/big-data/docker/authentik/server/custom-templates:/templates
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql
      - redis
    networks:
      - db-swarm-network
      - traefik-swarm-network
  authentik-worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.1}
    restart: unless-stopped
    command: worker
    deploy:
      placement:
        constraints:
          - node.role==worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/big-data/docker/authentik/worker/media:/media
      - /mnt/big-data/docker/authentik/worker/certs:/certs
      - /mnt/big-data/docker/authentik/worker/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      - db-swarm-network
      - traefik-swarm-network

networks:
  traefik-swarm-network:
    external: true
  db-swarm-network:
    external: true
